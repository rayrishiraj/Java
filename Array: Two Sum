//We solve this using for loop. We start here from i=0 and go til n-1 this is because the array indexing in Java begins with 0(that's why i = 0) but when we are using
for loop and i++ then we will require one short than the total number of elements(that's why i - 1)
//After that we are considering another loop j, so now it will check the element when i = 0 in index O with all the elements that's why j starts i+1th index and go till n because
in the first case let's consider i = 0 then j = 1 and j will go up to n so it will check all the elements from index 1 to nth with index 0th element.

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0;i < n-1;i++){
            for (int j = i+1;j < n;j++){
                if (nums[i] + nums[j] == target){
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{};
    }
}
